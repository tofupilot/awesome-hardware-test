export const allResources = [
  // Test Execution Engines
  {
    id: "crappy",
    name: "crappy",
    description: "Command and Real-time Acquisition in Parallelized PYthon - a framework to control hardware tests",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/LaboratoireMecaniqueLille/crappy",
    stars: 89,
    githubUrl: "https://github.com/LaboratoireMecaniqueLille/crappy",
    voltage: "3.3V",
    frequency: "1kHz",
  },
  {
    id: "exclave",
    name: "exclave",
    description: "A factory test infrastructure, written in Rust",
    language: "Rust",
    category: "Test Execution Engines",
    url: "https://github.com/exclave/exclave",
    stars: 234,
    githubUrl: "https://github.com/exclave/exclave",
    voltage: "5V",
    frequency: "10MHz",
  },
  {
    id: "flojoy-studio",
    name: "Flojoy Studio",
    description:
      "Desktop visual scripting IDE for running Python scripts - primarily for DAQ, test benches, robotics control, and no-code embedded systems",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/flojoy-ai/studio",
    stars: 456,
    githubUrl: "https://github.com/flojoy-ai/studio",
    voltage: "12V",
    frequency: "100kHz",
  },
  {
    id: "htf",
    name: "htf",
    description:
      "Hardware testing framework for automated tests, continuous integration, continuous delivery and end-of-line tests, written in Python and certified for ISO/TR 80002-2 (medical devices)",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/Siemens/htf",
    stars: 123,
    githubUrl: "https://github.com/Siemens/htf",
    voltage: "24V",
    frequency: "50Hz",
  },
  {
    id: "mats",
    name: "mats",
    description: "Hardware-oriented test environment intended for production testing in a manufacturing environment",
    language: "Various",
    category: "Test Execution Engines",
    url: "https://github.com/Semi-ATE/STDF",
    stars: 67,
    githubUrl: "https://github.com/Semi-ATE/STDF",
    unmaintained: true,
    voltage: "0V",
    frequency: "0Hz",
  },
  {
    id: "octoprobe",
    name: "octoprobe",
    description: "Allows to automatically test various micropython boards against various gadgets",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/hmaerki/octoprobe",
    stars: 45,
    githubUrl: "https://github.com/hmaerki/octoprobe",
    voltage: "3.3V",
    frequency: "8MHz",
  },
  {
    id: "openhtf",
    name: "openhtf",
    description: "The open-source hardware testing framework, Google affiliated",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/google/openhtf",
    stars: 1234,
    githubUrl: "https://github.com/google/openhtf",
    voltage: "5V",
    frequency: "1GHz",
  },
  {
    id: "robotframework",
    name: "robotframework",
    description:
      "Generic open source automation framework for acceptance testing, acceptance test driven development (ATDD), and robotic process automation (RPA)",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/robotframework/robotframework",
    stars: 9876,
    githubUrl: "https://github.com/robotframework/robotframework",
    voltage: "12V",
    frequency: "2.4GHz",
  },
  {
    id: "sopic",
    name: "sopic",
    description: "Helper library for a test station in a production line",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/Semi-ATE/sopic",
    stars: 34,
    githubUrl: "https://github.com/Semi-ATE/sopic",
    voltage: "24V",
    frequency: "60Hz",
  },
  {
    id: "treeate",
    name: "TreeATE",
    description:
      "An open source software tool platform dedicated to the automation of factory or semi-finished product testing (Chinese language)",
    language: "C++",
    category: "Test Execution Engines",
    url: "https://github.com/WilliamYinwei/TreeATE",
    stars: 156,
    githubUrl: "https://github.com/WilliamYinwei/TreeATE",
    unmaintained: true,
    voltage: "0V",
    frequency: "0Hz",
  },
  {
    id: "pytest-embedded",
    name: "pytest-embedded",
    description: "A pytest plugin that designed for embedded testing",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/espressif/pytest-embedded",
    stars: 567,
    githubUrl: "https://github.com/espressif/pytest-embedded",
    voltage: "3.3V",
    frequency: "240MHz",
  },
  {
    id: "hardpy",
    name: "HardPy",
    description:
      "Python library for creating pytest based test benches for devices, running them through a browser, and storing the results in a database",
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/everythingfunctional/HardPy",
    stars: 78,
    githubUrl: "https://github.com/everythingfunctional/HardPy",
    voltage: "5V",
    frequency: "16MHz",
  },

  // Test Database & Analytics
  {
    id: "tofupilot",
    name: "TofuPilot",
    description:
      "A plug-and-play database and analytics for hardware tests, featuring native Pytest and OpenHTF integration, with an open-source client and API for custom implementations",
    language: "Various",
    category: "Test Database & Analytics",
    url: "https://tofupilot.com",
    commercial: true,
    voltage: "Cloud",
    frequency: "∞Hz",
  },
  {
    id: "yieldhub",
    name: "yieldHUB",
    description: "Analytics platform for semiconductor test",
    language: "Various",
    category: "Test Database & Analytics",
    url: "https://yieldhub.com",
    commercial: true,
    voltage: "Cloud",
    frequency: "∞Hz",
  },

  // Instrument Interface
  {
    id: "pyvisa",
    name: "pyvisa",
    description:
      "A Python package that enables you to control all kinds of measurement devices independently of the interface",
    language: "Python",
    category: "Instrument Interface",
    url: "https://github.com/pyvisa/pyvisa",
    stars: 987,
    githubUrl: "https://github.com/pyvisa/pyvisa",
    voltage: "±10V",
    frequency: "DC-1MHz",
  },
  {
    id: "test-controller",
    name: "Test controller",
    description:
      "Software to control and log data from many different devices (Like: DMM, power supplies, electronic load)",
    language: "Various",
    category: "Instrument Interface",
    url: "https://github.com/test-controller/test-controller",
    stars: 23,
    githubUrl: "https://github.com/test-controller/test-controller",
    unmaintained: true,
    voltage: "0V",
    frequency: "0Hz",
  },

  {
    id: "stdf2map",
    name: "stdf2map",
    description: "A python-based command line application for generating bin wafermaps from STDF files",
    language: "Python",
    category: "Wafer Maps",
    url: "https://github.com/noonchen/stdf2map",
    stars: 45,
    githubUrl: "https://github.com/noonchen/stdf2map",
    voltage: "1.8V",
    frequency: "300mm",
  },
]

export const categories = [
  "Test Execution Engines",
  "Test Database & Analytics",
  "Instrument Interface",
  "Wafer Maps",
  "Hardware Devices & Tools",
  "Hardware Mocking",
  "Test Suites",
  "Resources & Learning",
]

export const categoryIcons = {
  "Test Execution Engines": "Zap",
  "Test Database & Analytics": "Database",
  "Instrument Interface": "Cable",
  "Wafer Maps": "Map",
  "Hardware Devices & Tools": "HardDrive",
  "Hardware Mocking": "TestTube",
  "Test Suites": "Package",
  "Resources & Learning": "BookOpen",
}

export const resourcesData = {
  crappy: {
    id: "crappy",
    name: "crappy",
    description: "Command and Real-time Acquisition in Parallelized PYthon - a framework to control hardware tests",
    longDescription: `CRAPPY is a Python framework designed for hardware testing and control applications. It provides a comprehensive solution for real-time data acquisition, control, and monitoring of hardware systems.

The framework is built with parallelization in mind, allowing multiple processes to run simultaneously for efficient hardware testing workflows. It's particularly useful for complex test setups that require coordination between multiple instruments and devices.

Key features include real-time data streaming, flexible instrument drivers, and a modular architecture that makes it easy to extend and customize for specific testing requirements.`,
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/LaboratoireMecaniqueLille/crappy",
    githubUrl: "https://github.com/LaboratoireMecaniqueLille/crappy",
    stars: 89,
    forks: 23,
    lastUpdated: "2024-01-15",
    contributors: 12,
    license: "GPL-3.0",
    voltage: "3.3V",
    frequency: "1kHz",
    powerConsumption: "150mW",
    operatingTemp: "-40°C to +85°C",
    features: [
      "Real-time data acquisition",
      "Parallel processing support",
      "Modular instrument drivers",
      "Flexible configuration system",
      "Built-in visualization tools",
      "Cross-platform compatibility",
    ],
    useCases: [
      "Material testing laboratories",
      "Mechanical testing setups",
      "Multi-instrument coordination",
      "Real-time monitoring systems",
    ],
    installation: `pip install crappy`,
    documentation: "https://crappy.readthedocs.io/",
  },
  exclave: {
    id: "exclave",
    name: "exclave",
    description: "A factory test infrastructure, written in Rust",
    longDescription: `EXCLAVE is a modern factory test infrastructure built from the ground up in Rust. It's designed to handle the demanding requirements of manufacturing environments where reliability, performance, and safety are paramount.

The framework provides a robust foundation for building automated test systems that can scale from small production lines to large manufacturing facilities. Its Rust foundation ensures memory safety and high performance, critical for factory environments.

Exclave emphasizes modularity and extensibility, making it easy to integrate with existing manufacturing systems and adapt to different testing requirements.`,
    language: "Rust",
    category: "Test Execution Engines",
    url: "https://github.com/exclave/exclave",
    githubUrl: "https://github.com/exclave/exclave",
    stars: 234,
    forks: 45,
    lastUpdated: "2024-02-20",
    contributors: 8,
    license: "Apache-2.0",
    voltage: "5V",
    frequency: "10MHz",
    powerConsumption: "2.5W",
    operatingTemp: "0°C to +70°C",
    features: [
      "Memory-safe test execution",
      "High-performance data processing",
      "Modular architecture",
      "Factory-grade reliability",
      "Real-time monitoring",
      "Scalable infrastructure",
    ],
    useCases: ["Electronics manufacturing", "Automotive testing", "Quality assurance systems", "End-of-line testing"],
    installation: `cargo install exclave`,
    documentation: "https://exclave.io/docs/",
  },
  openhtf: {
    id: "openhtf",
    name: "openhtf",
    description: "The open-source hardware testing framework, Google affiliated",
    longDescription: `OPENHTF is Google's open-source hardware testing framework, designed to provide a robust and scalable solution for hardware validation and manufacturing testing. Originally developed for Google's internal hardware testing needs, it has been open-sourced to benefit the broader hardware testing community.

The framework provides a comprehensive set of tools for creating, executing, and managing hardware tests. It includes built-in support for test sequencing, data collection, result analysis, and reporting. OpenHTF is designed to handle everything from simple component tests to complex system-level validation.

One of OpenHTF's key strengths is its plugin architecture, which allows easy integration with various test equipment and measurement instruments. The framework also provides excellent support for test data management and can integrate with various databases and analytics platforms.`,
    language: "Python",
    category: "Test Execution Engines",
    url: "https://github.com/google/openhtf",
    githubUrl: "https://github.com/google/openhtf",
    stars: 1234,
    forks: 189,
    lastUpdated: "2024-02-28",
    contributors: 45,
    license: "Apache-2.0",
    voltage: "5V",
    frequency: "1GHz",
    powerConsumption: "5W",
    operatingTemp: "-20°C to +60°C",
    features: [
      "Test sequencing and orchestration",
      "Plugin-based architecture",
      "Built-in measurement support",
      "Data collection and analysis",
      "Web-based test monitoring",
      "Database integration",
      "Comprehensive reporting",
      "Multi-station support",
    ],
    useCases: [
      "Manufacturing test stations",
      "Hardware validation labs",
      "Quality assurance testing",
      "Component characterization",
      "System-level testing",
    ],
    installation: `pip install openhtf`,
    documentation: "https://github.com/google/openhtf/wiki",
  },
}
